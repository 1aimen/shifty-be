generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model auditlog {
  id             String        @id @default(uuid()) 
  organizationId String?
  userId         String?
  action         String
  resource       String?
  description    String?
  metaJson       String?
  createdAt      DateTime      @default(now())
  organization   organization? @relation(fields: [organizationId], references: [id], map: "AuditLog_organizationId_fkey")
  user           user?         @relation(fields: [userId], references: [id], map: "AuditLog_userId_fkey")

  @@index([organizationId], map: "AuditLog_organizationId_fkey")
  @@index([userId], map: "AuditLog_userId_fkey")
}

model clock {
  id        String    @id @default(uuid())
  shiftId   String
  userId    String
  createdById String
  createdAt DateTime  @default(now())
  shift     shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  creator   user      @relation(fields: [createdById], references: [id])
  clockIns  clockIn[]
  clockOuts clockOut[]
  
  @@index([shiftId])
  @@index([userId])
}

model reportSchedule {
  id          String   @id @default(uuid())
  reportType  String   // "PERSONAL" | "SHIFT" | "PROJECT" | "ORGANIZATION"
  recipientId String
  recipient   user     @relation(fields: [recipientId], references: [id])
  frequency   String   // "DAILY" | "WEEKLY" | "MONTHLY"
  timeConfig  String   // JSON string: {hour, minute, dayOfWeek?, dayOfMonth?}
  createdAt   DateTime @default(now())

  @@index([recipientId])
}



model clockIn {
  id        String   @id @default(uuid())
  clockId   String
  clockAt   DateTime @default(now())
  method    String?
  latitude  Float?
  longitude Float?
  ipAddress String?
  device    String?
  createdAt DateTime @default(now())
  clock     clock    @relation(fields: [clockId], references: [id], onDelete: Cascade)

  @@index([clockId])
}

model clockOut {
  id        String   @id @default(uuid())
  clockId   String
  clockAt   DateTime @default(now())
  method    String?
  latitude  Float?
  longitude Float?
  ipAddress String?
  device    String?
  createdAt DateTime @default(now())
  clock     clock    @relation(fields: [clockId], references: [id], onDelete: Cascade)

  @@index([clockId])
}


model exportfile {
  id          String     @id @default(uuid()) 
  storageKey  String     @unique(map: "ExportFile_storageKey_key")
  mimeType    String
  size        Int?
  createdAt   DateTime   @default(now())
  downloadUrl String?
  exportjob   exportjob?
}

model exportjob {
  id             String           @id @default(uuid()) 
  organizationId String
  requestedById  String?
  format         exportjob_format
  status         exportjob_status @default(PENDING)
  filtersJson    String?
  fileId         String?          @unique(map: "ExportJob_fileId_key")
  createdAt      DateTime         @default(now())
  completedAt    DateTime?
  errorMessage   String?
  exportfile     exportfile?      @relation(fields: [fileId], references: [id], map: "ExportJob_fileId_fkey")
  organization   organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "ExportJob_organizationId_fkey")
  user           user?            @relation(fields: [requestedById], references: [id], map: "ExportJob_requestedById_fkey")

  @@index([organizationId], map: "ExportJob_organizationId_fkey")
  @@index([requestedById], map: "ExportJob_requestedById_fkey")
}

model organization {
  id                     String                   @id @default(uuid()) 
  name                   String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  auditlog               auditlog[]
  exportjob              exportjob[]
  organizationinvitation organizationinvitation[]
  organizationsettings   organizationsettings?
  paymentmethod          paymentmethod[]
  paymentprovider        paymentprovider[]
  payout                 payout[]
  payrollrun             payrollrun[]
  project                project[]
  shift                  shift[]
  timeentry              timeentry[]
  timesheet              timesheet[]
  user                   user[]
  webhookevent           webhookevent[]
}

model organizationinvitation {
  id             String                        @id @default(uuid()) 
  email          String
  role           organizationinvitation_role   @default(EMPLOYEE)
  token          String                        @unique(map: "OrganizationInvitation_token_key")
  status         organizationinvitation_status @default(PENDING)
  organizationId String
  invitedById    String?
  createdAt      DateTime                      @default(now())
  expiresAt      DateTime
  acceptedAt     DateTime?
  user           user?                         @relation(fields: [invitedById], references: [id], map: "OrganizationInvitation_invitedById_fkey")
  organization   organization                  @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "OrganizationInvitation_organizationId_fkey")

  @@index([invitedById], map: "OrganizationInvitation_invitedById_fkey")
  @@index([organizationId], map: "OrganizationInvitation_organizationId_fkey")
}

model organizationsettings {
  id                  String       @id @default(uuid()) 
  organizationId      String       @unique(map: "OrganizationSettings_organizationId_key")
  timezone            String       @default("Europe/Paris")
  weekStartDay        Int          @default(1)
  requireGeo          Boolean      @default(false)
  requireDeviceLock   Boolean      @default(false)
  minimumClockSeconds Int?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime
  organization        organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "OrganizationSettings_organizationId_fkey")
}

model paymentmethod {
  id               String        @id @default(uuid()) 
  userId           String?
  organizationId   String?
  provider         String
  providerMethodId String
  label            String?
  createdAt        DateTime      @default(now())
  organization     organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "PaymentMethod_organizationId_fkey")
  user             user?         @relation(fields: [userId], references: [id], onDelete: Cascade, map: "PaymentMethod_userId_fkey")

  @@index([organizationId], map: "PaymentMethod_organizationId_fkey")
  @@index([userId], map: "PaymentMethod_userId_fkey")
}


model task {
  id          String    @id @default(uuid())
  projectId   String
  title       String
  description String?
  createdById String
  customRules String?    // store JSON as string
  status      String     @default("OPEN") // OPEN | IN_PROGRESS | COMPLETED
  startTime   DateTime?
  dueTime     DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  project     project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   user       @relation(fields: [createdById], references: [id])
  assignees   taskAssignee[]
}

model taskAssignee {
  id        String  @id @default(uuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())

  task task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
}

model paymentprovider {
  id             String               @id @default(uuid()) 
  organizationId String
  type           paymentprovider_type
  configJson     String
  createdAt      DateTime             @default(now())
  organization   organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "PaymentProvider_organizationId_fkey")
  payout         payout[]
  payrollrun     payrollrun[]

  @@index([organizationId], map: "PaymentProvider_organizationId_fkey")
}

model payout {
  id               String          @id @default(uuid()) 
  organizationId   String
  providerId       String
  providerPayoutId String?
  amount           Decimal         @db.Decimal(12, 2)
  currency         String          @default("EUR")
  status           String
  createdAt        DateTime        @default(now())
  processedAt      DateTime?
  organization     organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "Payout_organizationId_fkey")
  paymentprovider  paymentprovider @relation(fields: [providerId], references: [id], onDelete: Cascade, map: "Payout_providerId_fkey")

  @@index([organizationId], map: "Payout_organizationId_fkey")
  @@index([providerId], map: "Payout_providerId_fkey")
}

model payrollitem {
  id           String      @id @default(uuid()) 
  payrollRunId String?
  timesheetId  String?     @unique(map: "PayrollItem_timesheetId_key")
  userId       String
  grossAmount  Decimal     @db.Decimal(12, 2)
  taxAmount    Decimal?    @db.Decimal(12, 2)
  netAmount    Decimal     @db.Decimal(12, 2)
  currency     String      @default("EUR")
  createdAt    DateTime    @default(now())
  payrollrun   payrollrun? @relation(fields: [payrollRunId], references: [id], onDelete: Cascade, map: "PayrollItem_payrollRunId_fkey")
  timesheet    timesheet?  @relation(fields: [timesheetId], references: [id], map: "PayrollItem_timesheetId_fkey")
  user         user        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "PayrollItem_userId_fkey")

  @@index([payrollRunId], map: "PayrollItem_payrollRunId_fkey")
  @@index([userId], map: "PayrollItem_userId_fkey")
}

model payrollrun {
  id                String            @id @default(uuid()) 
  organizationId    String
  periodStart       DateTime
  periodEnd         DateTime
  status            payrollrun_status @default(PENDING)
  totalAmount       Decimal?          @db.Decimal(12, 2)
  currency          String            @default("EUR")
  createdAt         DateTime          @default(now())
  processedAt       DateTime?
  paymentProviderId String?
  payoutId          String?
  createdById       String?
  payrollitem       payrollitem[]
  user              user?             @relation(fields: [createdById], references: [id], map: "PayrollRun_createdById_fkey")
  organization      organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "PayrollRun_organizationId_fkey")
  paymentprovider   paymentprovider?  @relation(fields: [paymentProviderId], references: [id], map: "PayrollRun_paymentProviderId_fkey")

  @@index([createdById], map: "PayrollRun_createdById_fkey")
  @@index([organizationId], map: "PayrollRun_organizationId_fkey")
  @@index([paymentProviderId], map: "PayrollRun_paymentProviderId_fkey")
}

model project {
  id             String       @id @default(uuid()) 
  name           String
  description    String?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "Project_organizationId_fkey")
  timeentry      timeentry[]

  @@index([organizationId], map: "Project_organizationId_fkey")
  ProjectUser ProjectUser[]
  task task[]
  leave leave[]
}

model ProjectUser {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())

  project project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}


model refreshtoken {
  id           String   @id @default(uuid()) 
  userId       String
  refreshToken String   @unique(map: "RefreshToken_refreshToken_key") @db.VarChar(1024)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "RefreshToken_userId_fkey")

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model shift {
  id             String       @id @default(uuid()) 
  userId         String
  organizationId String
  startTime      DateTime
  endTime        DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  clock        clock[]
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "Shift_organizationId_fkey")
  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Shift_userId_fkey")

  @@index([organizationId], map: "Shift_organizationId_fkey")
  @@index([userId], map: "Shift_userId_fkey")
}

model timeentry {
  id             String          @id @default(uuid()) 
  userId         String
  projectId      String?
  organizationId String
  startTime      DateTime
  endTime        DateTime?
  duration       Int?
  description    String?
  adhoc          Boolean         @default(false)
  createdAt      DateTime        @default(now())
  organization   organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "TimeEntry_organizationId_fkey")
  project        project?        @relation(fields: [projectId], references: [id], map: "TimeEntry_projectId_fkey")
  user           user            @relation(fields: [userId], references: [id], onDelete: Cascade, map: "TimeEntry_userId_fkey")
  timesheetitem  timesheetitem[]

  @@index([organizationId], map: "TimeEntry_organizationId_fkey")
  @@index([projectId], map: "TimeEntry_projectId_fkey")
  @@index([userId], map: "TimeEntry_userId_fkey")
}

model timesheet {
  id                                String          @id @default(uuid()) 
  organizationId                    String
  userId                            String
  periodStart                       DateTime
  periodEnd                         DateTime
  totalSeconds                      Int             @default(0)
  approved                          Boolean         @default(false)
  approvedById                      String?
  approvedAt                        DateTime?
  createdAt                         DateTime        @default(now())
  updatedAt                         DateTime
  payrollitem                       payrollitem?
  user_timesheet_approvedByIdTouser user?           @relation("timesheet_approvedByIdTouser", fields: [approvedById], references: [id], map: "Timesheet_approvedById_fkey")
  organization                      organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "Timesheet_organizationId_fkey")
  user_timesheet_userIdTouser       user            @relation("timesheet_userIdTouser", fields: [userId], references: [id], onDelete: Cascade, map: "Timesheet_userId_fkey")
  timesheetitem                     timesheetitem[]

  @@index([approvedById], map: "Timesheet_approvedById_fkey")
  @@index([organizationId], map: "Timesheet_organizationId_fkey")
  @@index([userId], map: "Timesheet_userId_fkey")
}

model timesheetitem {
  id          String    @id @default(uuid()) 
  timesheetId String
  timeEntryId String
  seconds     Int
  createdAt   DateTime  @default(now())
  timeentry   timeentry @relation(fields: [timeEntryId], references: [id], onDelete: Cascade, map: "TimesheetItem_timeEntryId_fkey")
  timesheet   timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade, map: "TimesheetItem_timesheetId_fkey")

  @@index([timeEntryId], map: "TimesheetItem_timeEntryId_fkey")
  @@index([timesheetId], map: "TimesheetItem_timesheetId_fkey")
}

model user {
  id                                     String                   @id @default(uuid()) 
  username                               String                   @unique(map: "User_username_key")
  email                                  String                   @unique(map: "User_email_key")
  password                               String
  isEmailVerified                        Boolean                  @default(false)
  isDeactivated                          Boolean                  @default(false) 
  role                                   user_role                @default(ADMIN)
  createdAt                              DateTime                 @default(now())
  updatedAt                              DateTime
  organizationId                         String?
  auditlog                               auditlog[]
  exportjob                              exportjob[]
  organizationinvitation                 organizationinvitation[]
  paymentmethod                          paymentmethod[]
  payrollitem                            payrollitem[]
  payrollrun                             payrollrun[]
  refreshtoken                           refreshtoken[]
  shift                                  shift[]
  timeentry                              timeentry[]
  timesheet_timesheet_approvedByIdTouser timesheet[]              @relation("timesheet_approvedByIdTouser")
  timesheet_timesheet_userIdTouser       timesheet[]              @relation("timesheet_userIdTouser")
  passwordresettoken                     passwordresettoken[]     @relation(map: "UserPreferences_userId_fkey")
  organization                           organization?            @relation(fields: [organizationId], references: [id], map: "User_organizationId_fkey")
  userpreferences                        userpreferences?
  

  @@index([organizationId], map: "User_organizationId_fkey")
  emailverificationtoken emailverificationtoken[] @relation(map: "EmailVerificationToken_userId_fkey")
  ProjectUser ProjectUser[]
  task task[]
  taskAssignee taskAssignee[]
  leaveAssignee leaveAssignee[]
  leave leave[]
  clock clock[]
  reportSchedule reportSchedule[]
}

model passwordresettoken {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
 user       user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "PasswordResetToken_userId_fkey")
}

model emailverificationtoken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "EmailVerificationToken_userId_fkey")
}

model userpreferences {
  id            String   @id @default(uuid()) 
  userId        String   @unique(map: "UserPreferences_userId_key")
  language      String   @default("fr")
  darkMode      Boolean  @default(false)
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  user          user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserPreferences_userId_fkey")
}

model webhookevent {
  id             String        @id @default(uuid()) 
  organizationId String?
  provider       String
  eventType      String
  payloadJson    String
  receivedAt     DateTime      @default(now())
  processed      Boolean       @default(false)
  organization   organization? @relation(fields: [organizationId], references: [id], map: "WebhookEvent_organizationId_fkey")

  @@index([organizationId], map: "WebhookEvent_organizationId_fkey")
}

model leave {
  id             String       @id @default(uuid())
  projectId      String
  createdById    String
  userId         String?
  title          String
  description    String?
  type           String        // e.g., "VACATION", "SICK", "PUBLIC_HOLIDAY"
  startDate      DateTime
  endDate        DateTime
  status         leave_status  @default(PENDING)
  customRules    String?       // JSON string for special rules
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  project        project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy      user          @relation(fields: [createdById], references: [id])
  assignees      leaveAssignee[]
}

model leaveAssignee {
  id        String   @id @default(uuid())
  leaveId   String
  userId    String
  createdAt DateTime  @default(now())

  leave leave @relation(fields: [leaveId], references: [id], onDelete: Cascade)
  user  user  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([leaveId, userId])
  @@index([leaveId])
  @@index([userId])
}

enum leave_status {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}


enum organizationinvitation_role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum paymentprovider_type {
  STRIPE
  PAYPAL
  MANUAL
}

enum exportjob_format {
  CSV
  PDF
}

enum exportjob_status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum organizationinvitation_status {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum payrollrun_status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  PAID
}

enum user_role {
  ADMIN
  MANAGER
  EMPLOYEE
}
