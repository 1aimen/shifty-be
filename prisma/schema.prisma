generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////////////////////
// ENUMS
/////////////////////////////////////////////////

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum PlanTier {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  TRIAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ExportFormat {
  CSV
  PDF
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PayrollStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  PAID
}

enum PaymentProviderType {
  STRIPE
  PAYPAL
  MANUAL
}

/////////////////////////////////////////////////
// CORE / AUTH
/////////////////////////////////////////////////

model Organization {
  id             String                @id @default(uuid())
  name           String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  users          User[]
  projects       Project[]
  shifts         Shift[]
  timeEntries    TimeEntry[]
  settings       OrganizationSettings?
  invitations    OrganizationInvitation[]
  payrollRuns    PayrollRun[]
  exportJobs     ExportJob[]
  Timesheet Timesheet[]
  PaymentMethod PaymentMethod[]
  AuditLog AuditLog[]
  WebhookEvent WebhookEvent[]
  PaymentProvider PaymentProvider[]
  Payout Payout[]
}

model User {
  id              String            @id @default(uuid())
  username        String            @unique
  email           String            @unique
  password        String
  role            UserRole          @default(EMPLOYEE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  organizationId  String?
  organization    Organization?     @relation(fields: [organizationId], references: [id])

  refreshTokens   RefreshToken[]
  timeEntries     TimeEntry[]
  shifts          Shift[]
  preferences     UserPreferences?
  payrollItems    PayrollItem[]
  paymentMethods  PaymentMethod[]

  // Relations
  timesheets      Timesheet[]               // regular timesheets of the user
  approvedSheets  Timesheet[] @relation("Approver") // timesheets approved by this user

  exportJobs      ExportJob[]
  invitations     OrganizationInvitation[]
  auditLogs       AuditLog[]
  createdPayrolls PayrollRun[] @relation("PayrollCreator")
}


model RefreshToken {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique @db.VarChar(1024)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/////////////////////////////////////////////////
// TIME TRACKING
/////////////////////////////////////////////////

model Project {
  id             String       @id @default(uuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  timeEntries    TimeEntry[]
}

model Shift {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  startTime      DateTime
  endTime        DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  clockIns       ClockIn[]
}

model ClockIn {
  id          String   @id @default(uuid())
  shiftId     String
  clockInAt   DateTime @default(now())
  clockOutAt  DateTime?
  method      String?  // GPS | NFC | MANUAL | QR
  latitude    Float?
  longitude   Float?
  ipAddress   String?
  geoCountry  String?
  geoCity     String?
  device      String?
  createdAt   DateTime @default(now())

  shift       Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
}

model TimeEntry {
  id             String   @id @default(uuid())
  userId         String
  projectId      String?
  organizationId String
  startTime      DateTime
  endTime        DateTime?
  duration       Int?     // in seconds
  description    String?
  adhoc          Boolean  @default(false)
  createdAt      DateTime @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  project        Project?       @relation(fields: [projectId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // relation to aggregated timesheet entries
  timesheetItems TimesheetItem[]
}

/////////////////////////////////////////////////
// TIMESHEETS & AGGREGATION
/////////////////////////////////////////////////

model Timesheet {
  id             String     @id @default(uuid())
  organizationId String
  userId         String
  periodStart    DateTime   // beginning of period (e.g. 2025-10-01)
  periodEnd      DateTime   // end of period (e.g. 2025-10-31)
  totalSeconds   Int        @default(0)
  approved       Boolean    @default(false)
  approvedById   String?
  approvedAt     DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy     User?        @relation("Approver", fields: [approvedById], references: [id])
  items          TimesheetItem[]
  payrollItem    PayrollItem?
}

model TimesheetItem {
  id           String    @id @default(uuid())
  timesheetId  String
  timeEntryId  String
  seconds      Int
  createdAt    DateTime  @default(now())

  timesheet    Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
  timeEntry    TimeEntry @relation(fields: [timeEntryId], references: [id], onDelete: Cascade)
}

/////////////////////////////////////////////////
// PAYROLL / PAYMENTS
/////////////////////////////////////////////////

model PayrollRun {
  id              String        @id @default(uuid())
  organizationId  String
  periodStart     DateTime
  periodEnd       DateTime
  status          PayrollStatus @default(PENDING)
  totalAmount     Decimal?      @db.Decimal(12,2)
  currency        String        @default("EUR")
  createdAt       DateTime      @default(now())
  processedAt     DateTime?
  paymentProvider PaymentProvider? @relation(fields: [paymentProviderId], references: [id])
  paymentProviderId String?
  payoutId        String?       // reference to Payout if used
  payrollItems    PayrollItem[]
  createdById     String?
  createdBy       User?         @relation("PayrollCreator", fields: [createdById], references: [id])
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model PayrollItem {
  id            String    @id @default(uuid())
  payrollRunId  String?
  timesheetId   String? @unique
  userId        String
  grossAmount   Decimal   @db.Decimal(12,2)
  taxAmount     Decimal?  @db.Decimal(12,2)
  netAmount     Decimal   @db.Decimal(12,2)
  currency      String    @default("EUR")
  createdAt     DateTime  @default(now())

  payrollRun    PayrollRun? @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  timesheet     Timesheet?  @relation(fields: [timesheetId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentProvider {
  id          String               @id @default(uuid())
  organizationId String
  type        PaymentProviderType
  configJson  String               // encrypted JSON with provider keys / config
  createdAt   DateTime             @default(now())
  organization Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  payouts     Payout[]
  payrollRuns PayrollRun[]
}

model Payout {
  id               String    @id @default(uuid())
  organizationId   String
  providerId       String
  providerPayoutId String?   // id returned by provider
  amount           Decimal   @db.Decimal(12,2)
  currency         String    @default("EUR")
  status           String    // PENDING, SENT, FAILED
  createdAt        DateTime  @default(now())
  processedAt      DateTime?
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  provider         PaymentProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id            String   @id @default(uuid())
  userId        String?
  organizationId String?
  provider      String
  providerMethodId String
  label         String?
  createdAt     DateTime @default(now())

  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/////////////////////////////////////////////////
// EXPORTS / FILES
/////////////////////////////////////////////////

model ExportJob {
  id              String       @id @default(uuid())
  organizationId  String
  requestedById   String?
  format          ExportFormat
  status          ExportStatus  @default(PENDING)
  filtersJson     String?        // filters used for export (dates, users, projects)
  fileId          String?        @unique // generated file ref @unique @unique @unique @unique @unique
  createdAt       DateTime       @default(now())
  completedAt     DateTime?
  errorMessage    String?

  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  requestedBy     User?          @relation(fields: [requestedById], references: [id])
  exportFile      ExportFile?    @relation(fields: [fileId], references: [id])
}

model ExportFile {
  id          String   @id @default(uuid())
  storageKey  String   @unique  // S3 key or local path
  mimeType    String
  size        Int?
  createdAt   DateTime @default(now())
  downloadUrl String?  // temporary signed URL if stored remotely
  exportJob   ExportJob?
}

/////////////////////////////////////////////////
// INVITES, SETTINGS, PREFERENCES
/////////////////////////////////////////////////

model OrganizationInvitation {
  id              String            @id @default(uuid())
  email           String
  role            UserRole          @default(EMPLOYEE)
  token           String            @unique
  status          InvitationStatus  @default(PENDING)
  organizationId  String
  invitedById     String?
  createdAt       DateTime          @default(now())
  expiresAt       DateTime
  acceptedAt      DateTime?
  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy       User?             @relation(fields: [invitedById], references: [id])
}

model OrganizationSettings {
  id                String   @id @default(uuid())
  organizationId    String   @unique
  timezone          String   @default("Europe/Paris")
  weekStartDay      Int      @default(1) // Monday
  requireGeo        Boolean  @default(false)
  requireDeviceLock Boolean  @default(false)
  minimumClockSeconds Int?   // e.g. minimum allowed clock-in duration in seconds, null = none
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id             String   @id @default(uuid())
  userId         String   @unique
  language       String   @default("fr")
  darkMode       Boolean  @default(false)
  notifications  Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/////////////////////////////////////////////////
// AUDIT & WEBHOOKS
/////////////////////////////////////////////////

model AuditLog {
  id          String   @id @default(uuid())
  organizationId String?
  userId      String?
  action      String   // e.g. "CLOCK_IN", "TIMESHEET_APPROVED", "PAYROLL_RUN"
  resource    String?  // optional resource id
  description String?
  metaJson    String?
  createdAt   DateTime @default(now())

  organization Organization? @relation(fields: [organizationId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
}

model WebhookEvent {
  id            String   @id @default(uuid())
  organizationId String?
  provider      String
  eventType     String
  payloadJson   String
  receivedAt    DateTime @default(now())
  processed     Boolean  @default(false)

  organization  Organization? @relation(fields: [organizationId], references: [id])
}
